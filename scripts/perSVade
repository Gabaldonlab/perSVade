#!/usr/bin/env python

# This is a script to execute perSVade by modules

# get environment
import sys
import os
import pandas as pd
import re

# get the cwd were all the scripts are 
CWD = "/".join(__file__.split("/")[0:-1]); sys.path.insert(0, CWD)

# define env
import sv_functions as fun
perSVade_py = "%s/perSVade.py"%CWD 

# define help messages
help_args = ["-h","--help","getopt","usage","help","-help"]

# if there are no arguments, just print the first one
if len(sys.argv)==1 or sys.argv[1] in help_args:

    print("""
    --------------------------------------------------------------------------------
    perSVade: personalized Structural Variation detection
    This is a pipeline to call and annotate small variants, structural variants (SVs) and/or coverage-derived copy number variants (CNVs)
    Find more information in https://github.com/Gabaldonlab/perSVade
    --------------------------------------------------------------------------------

    These are the available modules (see https://github.com/Gabaldonlab/perSVade/wiki/1.-Pipeline-overview to combine them):

        trim_reads_and_QC           Trimming (with trimmomatic) and quality control (with fastqc) of the reads 
                                    IMPORTANT: Check the output of fastqc before using the trimmed reads for other analyses

        align_reads                 Align reads, mark duplicates and calculate coverage per windows 
        infer_repeats               Find repeats in a genome, which is necessary for some of the modules below
        find_homologous_regions     Find regions with pairwise homology in a genome
        find_knownSVs_regions       Find regions with perSVade-inferred SVs
        optimize_parameters         Find optimal parameters for SV calling through simulations 
        call_SVs                    Call structural variants (SVs) with gridss and clove
        call_CNVs                   Call copy-number variants (CNVs) based on coverage
        integrate_SV_CNV_calls      Integrate the variant calls of 'call_SVs' and 'call_CNVs' into a single .vcf file
        annotate_SVs                Annotate the fuctional impact of the variants from 'integrate_SV_CNV_calls'
        call_small_variants         Call SNPs and small IN/DELs 
        annotate_small_vars         Annotate the fuctional impact of the variants from 'call_small_variants'
        get_cov_genes               Calculate the coverage for each gene of the genome

    Usage:

        perSVade <module> <args>. Type 'perSVade <module> -h' for more information on each of them.

    """)

else:

    # define the modules
    available_modules = {"trim_reads_and_QC", "align_reads", "infer_repeats", "find_homologous_regions", "call_SVs", "find_knownSVs_regions", "optimize_parameters", "call_CNVs", "integrate_SV_CNV_calls", "annotate_SVs", "call_small_variants", "annotate_small_vars", "get_cov_genes"}
    module = sys.argv[1]

    # define script of this module
    module_script = "%s/%s"%(CWD, module)

    # unavailable modules
    if fun.file_is_empty(module_script) or module not in available_modules:
        print("ERROR: module '%s' is not available. Type 'perSVade -h' for more info"%(module)); sys.exit(1)

    # print help
    if len(sys.argv)==2 or sys.argv[2] in help_args: fun.run_cmd_simple_noError("%s --help"%module_script)

    # run script
    else: 
        print("Running module %s..."%module)
        fun.run_cmd_simple_noError("%s %s"%(module_script, " ".join(sys.argv[2:])))

