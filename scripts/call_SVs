#!/usr/bin/env python

######################################
############# DEFINE ENV #############
######################################

# general module imports
import argparse, os
from argparse import RawTextHelpFormatter
import copy as cp
import pickle
import string
import shutil 
import random
import sys
from shutil import copyfile
import time

# get the cwd were all the scripts are 
CWD = "/".join(__file__.split("/")[0:-1]); sys.path.insert(0, CWD)

# define the module name
module_name = __file__.split("/")[-1]

# define the EnvDir where the environment is defined
EnvDir = "/".join(sys.executable.split("/")[0:-2])

# import functions
import sv_functions as fun

# import perSVade-specific modules
import pandas as pd

######################################
######################################
######################################


#################################### 
############## ARGS ################
####################################

description = """
Call structural variants from a sorted bam with gridss and clove, generating one file for each type of SV. The parameters for filtering should be specified through --SVcalling_parameters.
"""

parser = argparse.ArgumentParser(description=description, formatter_class=RawTextHelpFormatter)
parser.add_argument("-o", "--outdir", dest="outdir", action="store", required=True, help="Output directory.")
parser.add_argument("-r", "--ref", dest="ref", required=True, help="Reference genome. It has to end with .fasta.")
parser.add_argument("-sbam", "--sortedbam", dest="sortedbam", required=True, help="The path to the sorted .bam file, which should have a bam.bai file in the same dir. For example, if your bam file is called 'aligned_reads.bam', there should be an 'aligned_reads.bam.bai' as well.")
parser.add_argument("--SVcalling_parameters", dest="SVcalling_parameters", required=True, help="The SV calling parameters. It can be 'default' or a .json file with custom parameters. An example of such a .json script can be found in misc/default_perSVade_parameters.json of perSVade's github repository.")
parser.add_argument("-mchr", "--mitochondrial_chromosome", dest="mitochondrial_chromosome", required=True, type=str, help="The name of the mitochondrial chromosome. If there is no mitochondria just put 'no_mitochondria'. If there is more than one mitochindrial scaffold, provide them as comma-sepparated IDs, like '--mitochondrial_chromosome chr_mito_1,chr_mito_2'.")
parser.add_argument("--repeats_file", dest="repeats_file", required=True, help="A file with the repeats of the reference genome, such as the file 'combined_repeats.tab' generated by perSVade infer_repeats. You may set '--repeats_file skip' if you don't want to consider repeats for SV filtering.")

parser.add_argument("--min_chromosome_len", dest="min_chromosome_len", default=100000, type=int, help="The minimum length to consider chromosomes from the provided fasta for calculating the window length (used in may steps of perSVade to parallelize across fractions of the genome).")
parser.add_argument("--replace", dest="replace", action="store_true", help="Re-run all the steps by deleting the output directory.")
parser.add_argument("--verbose", dest="verbose", action="store_true", default=False, help="Print a verbose log.")

# resources
parser.add_argument("--fraction_available_mem", dest="fraction_available_mem", default=None, type=float, help="This pipeline calculates the available RAM for several steps, and it may not work well in some systems (i.e. HPC clusters). This parameter allows you to correct possible errors. If --fraction_available_mem is not provided (default behavior), this pipeline will calculate the available RAM by filling the memory, which may give errors. If you want to use all the available memory you should specify --fraction_available_mem 1.0. See the FAQ 'How does the --fraction_available_mem work?' from https://github.com/Gabaldonlab/perSVade/wiki/8.-FAQs for more info.")

parser.add_argument("-thr", "--threads", dest="threads", default=16, type=int, help="Number of threads, Default: 16")
parser.add_argument("--fractionRAM_to_dedicate", dest="fractionRAM_to_dedicate", type=float,  default=0.5, help="This is the fraction of the available memory that will be used by several java programs that require a heap size. By default we set this to 0.5 to not overload the system.")

opt = parser.parse_args()

####################################
####################################
####################################

#################################
########### MAIN CODE ###########
#################################

# remove outdir if replace, and set replace to False
if opt.replace is True: fun.delete_folder(opt.outdir)
opt.replace = False

# make the outdir
fun.make_folder(opt.outdir)

# exit if the final file exists
final_file = "%s/perSVade_finished_file.txt"%opt.outdir

if not fun.file_is_empty(final_file): 
    fun.print_with_runtime("WARNING: %s exists, suggesting that perSVade was already  run in this folder. Remove this file if you want this command to work. Exiting..."%final_file)
    sys.exit(0)

# define the start time
start_time = time.time()

# define the verbosity. If opt.verbose is False, none of the 'print' statements of sv_functions will have an effect
fun.printing_verbose_mode = opt.verbose

# define a file that will contain all the cmds ran
fun.log_file_all_cmds = "%s/all_cmds.txt"%opt.outdir
if fun.file_is_empty(fun.log_file_all_cmds): open(fun.log_file_all_cmds, "w").write("# These are all the cmds:\n")

# get sample name
sample_name = fun.get_sampleName_from_perSVade_outdir(opt.outdir)

####### SET RESOURCES ########

# define the fraction of RAM to dedicate
if opt.fractionRAM_to_dedicate>0.95: raise ValueError("You are using >95 pct of the systems RAM, which is dangerous")
fun.fractionRAM_to_dedicate = opt.fractionRAM_to_dedicate

# define the fraction of available mem
fun.fraction_available_mem = opt.fraction_available_mem
if opt.fraction_available_mem is None: fun.print_with_runtime("WARNING: You did not specify how much RAM should be used through --fraction_available_mem. perSVade will calculate this by filling the memory, which may be dangerous. If you want to use all the allocated memory you should specify --fraction_available_mem 1.0")

# print the available resources
real_available_threads = fun.get_available_threads(opt.outdir)
if opt.threads>real_available_threads:  fun.print_with_runtime("WARNING: There are %i available threads, and you required %i."%(real_available_threads, opt.threads))

available_Gb_RAM = fun.get_availableGbRAM(opt.outdir)
fun.print_with_runtime("Running perSVade %s into %s with %.3f Gb of RAM and %i cores"%(module_name, opt.outdir, available_Gb_RAM, opt.threads))

##############################

# prepare the reference genome
opt.ref, reference_genome_dir = fun.prepare_reference_genome_for_perSVade(opt.ref, opt.outdir, opt.mitochondrial_chromosome, None, opt.replace)
fun.window_l = fun.get_perSVade_window_l(opt.ref, opt.mitochondrial_chromosome, opt.min_chromosome_len)

# get the bam file under output
sorted_bam, index_bam = fun.get_sorted_bam_in_outdir(opt.sortedbam, opt.outdir)

# get the SV calling parameters
gridss_blacklisted_regions, gridss_maxcoverage, gridss_filters_dict, max_rel_coverage_to_consider_del, min_rel_coverage_to_consider_dup = fun.get_SVcalling_parameters(opt.SVcalling_parameters)

# prepare the repeats file
fun.prepare_repeats_file_for_perSVade(opt.repeats_file, opt.ref)

# log
fun.print_with_runtime("Running SV calling")

# define outdirs (this is done like this to be able to use fun.clean_perSVade_outdir at the end)
SVdetection_outdir = "%s/SVdetection_output"%opt.outdir; fun.make_folder(SVdetection_outdir)
outdir_gridss_final = "%s/final_gridss_running"%SVdetection_outdir; fun.make_folder(outdir_gridss_final)

# define the final vcf dir
final_gridss_vcf = "%s/output_gridss.vcf"%outdir_gridss_final

# define the median coverage across window_l windows of the genome
coverage_df =  pd.read_csv(fun.generate_coverage_per_window_file_parallel(opt.ref, outdir_gridss_final, sorted_bam, windows_file="none", replace=opt.replace, threads=opt.threads), sep="\t")
median_coverage = fun.get_median_coverage(coverage_df, opt.mitochondrial_chromosome)
fun.print_with_runtime("The median coverage is %ix"%median_coverage)

# clean the reference genome windows files
fun.clean_reference_genome_windows_files(opt.ref)

# calculate the insert size
median_insert_size, median_insert_size_sd  = fun.get_insert_size_distribution(sorted_bam, replace=opt.replace, threads=opt.threads)
fun.print_with_runtime("The median insert size is %i, with an absolute deviation of %i"%(median_insert_size, median_insert_size_sd))

# run the pipeline
fun.print_with_runtime("running SV calling")
final_sv_dict, df_gridss = fun.run_gridssClove_given_filters(sorted_bam, opt.ref, outdir_gridss_final, median_coverage, replace=opt.replace, threads=opt.threads, gridss_blacklisted_regions=gridss_blacklisted_regions, gridss_VCFoutput=final_gridss_vcf, gridss_maxcoverage=gridss_maxcoverage, median_insert_size=median_insert_size, median_insert_size_sd=median_insert_size_sd, gridss_filters_dict=gridss_filters_dict, run_in_parallel=True, max_rel_coverage_to_consider_del=max_rel_coverage_to_consider_del, min_rel_coverage_to_consider_dup=min_rel_coverage_to_consider_dup, replace_FromGridssRun=False)

# at the end, remove all the mosdepth and windows files under the reference
fun.clean_reference_genome_windows_files(opt.ref)

#################################
#################################
#################################


##################################
########## CLEAN OUTPUT ##########
##################################

# log
fun.print_with_runtime("cleaning")

# clean normal perSVade outdir
fun.clean_perSVade_outdir(opt.outdir)

# remove extra files
for f in os.listdir(opt.outdir): 
    file_path = "%s/%s"%(opt.outdir, f)
    if os.path.isfile(file_path) and f!="all_cmds.txt": fun.remove_file(file_path)

# move to outir
for f in os.listdir(outdir_gridss_final): 
    file_path = "%s/%s"%(outdir_gridss_final, f)
    os.rename(file_path, "%s/%s"%(opt.outdir, f))

# remove specific dirs
for f in [reference_genome_dir, SVdetection_outdir]: fun.delete_folder(f)
for f in ["gridss_output.vcf.withSimpleEventType.vcf.vcf_df.py"]: fun.remove_file("%s/%s"%(opt.outdir, f))

# wite final file
fun.generate_final_file_report_one_module(final_file, start_time, time.time())

# print the message
fun.print_with_runtime("perSVade %s finished correctly"%module_name)

##################################
##################################
##################################
